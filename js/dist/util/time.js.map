{"version":3,"file":"time.js","sources":["../../src/util/time.js"],"sourcesContent":["/**\n * Converts a 12-hour time format to a 24-hour time format.\n * @param {('am' | 'pm')} abbr The abbreviation indicating AM or PM.\n * @param {number} hour The hour to be converted.\n * @returns {number} The hour in 24-hour format.\n */\nexport const convert12hTo24h = (abbr, hour) => {\n  if (abbr === 'am' && hour === 12) {\n    return 0\n  }\n\n  if (abbr === 'am') {\n    return hour\n  }\n\n  if (abbr === 'pm' && hour === 12) {\n    return 12\n  }\n\n  return hour + 12\n}\n\n/**\n * Converts a 24-hour time format to a 12-hour format.\n * @param {number} hour The hour to be converted.\n * @returns {number} The hour in 12-hour format.\n */\nexport const convert24hTo12h = hour => hour % 12 || 12\n\n/**\n * Converts a time input into a Date object.\n * @param {Date | string | null | undefined} time The time input to be converted.\n * @returns {Date | null} The converted Date object or null if the input is falsy.\n */\nexport const convertTimeToDate = time =>\n  time ? (time instanceof Date ? time : new Date(`1970-01-01 ${time}`)) : null\n\n/**\n * Retrieves the AM/PM part of the specified date according to the given locale.\n * @param {Date} date The date from which to extract the AM/PM part.\n * @param {string} locale The locale to use for formatting.\n * @returns {string} 'am' or 'pm' based on the given date and locale.\n */\nexport const getAmPm = (date, locale) => {\n  if (date.toLocaleTimeString(locale).includes('AM')) {\n    return 'am'\n  }\n\n  if (date.toLocaleTimeString(locale).includes('PM')) {\n    return 'pm'\n  }\n\n  return date.getHours() >= 12 ? 'pm' : 'am'\n}\n\n/**\n * Formats an array of time values (hours, minutes, or seconds) according to the specified locale and partial.\n * @param {number[]} values An array of time values to format.\n * @param {string} locale The locale to use for formatting.\n * @param {('hour' | 'minute' | 'second')} partial The type of time value to format.\n * @returns {Array} An array of objects with the original value and its localized label.\n */\nexport const formatTimePartials = (values, locale, partial) => {\n  const date = new Date()\n\n  const forceTwoDigit = shouldUseTwoDigitHour(locale)\n  const formatter = new Intl.DateTimeFormat(locale, {\n    hour: forceTwoDigit ? '2-digit' : 'numeric',\n    minute: '2-digit',\n    second: '2-digit'\n  })\n\n  return values.map(value => {\n    if (partial === 'hour') {\n      date.setHours(value)\n    }\n\n    if (partial === 'minute') {\n      date.setMinutes(value)\n    }\n\n    if (partial === 'second') {\n      date.setSeconds(value)\n    }\n\n    return {\n      value,\n      label:\n        formatter.formatToParts(date).find(part => part.type === partial)\n          ?.value || ''\n    }\n  })\n}\n\n/**\n * Generates localized time partials (hours, minutes, seconds) based on the given parameters.\n * @param {string} locale The locale to use for generating localized time partials.\n * @param {'auto' | boolean} ampm Determines whether to use 12-hour or 24-hour format. 'auto' decides based on locale.\n * @param {boolean | number[] | Function} hours An array of hours, a boolean, or a function to generate hours.\n * @param {boolean | number[] | Function} minutes An array of minutes, a boolean, or a function to generate minutes.\n * @param {boolean | number[] | Function} seconds An array of seconds, a boolean, or a function to generate seconds.\n * @returns {LocalizedTimePartials} An object containing arrays of localized time partials and a boolean indicating if 12-hour format is used.\n */\nexport const getLocalizedTimePartials = (\n  locale,\n  ampm = 'auto',\n  hours = [],\n  minutes = [],\n  seconds = []\n) => {\n  const hour12 = (ampm === 'auto' && isAmPm(locale)) || ampm === true\n\n  const listOfHours =\n    Array.isArray(hours) && hours.length > 0 ?\n      hours :\n      (typeof hours === 'function' ?\n        Array.from({ length: hour12 ? 12 : 24 }, (_, i) =>\n          hour12 ? i + 1 : i\n        ).filter(hour => hours(hour)) :\n        Array.from({ length: hour12 ? 12 : 24 }, (_, i) => (hour12 ? i + 1 : i)))\n\n  const listOfMinutes =\n    Array.isArray(minutes) && minutes.length > 0 ?\n      minutes :\n      (typeof minutes === 'function' ?\n        Array.from({ length: 60 }, (_, i) => i).filter(minute =>\n          minutes(minute)\n        ) :\n        Array.from({ length: 60 }, (_, i) => i))\n\n  const listOfSeconds =\n    Array.isArray(seconds) && seconds.length > 0 ?\n      seconds :\n      (typeof seconds === 'function' ?\n        Array.from({ length: 60 }, (_, i) => i).filter(second =>\n          seconds(second)\n        ) :\n        Array.from({ length: 60 }, (_, i) => i))\n\n  return {\n    listOfHours: formatTimePartials(listOfHours, locale, 'hour'),\n    listOfMinutes: formatTimePartials(listOfMinutes, locale, 'minute'),\n    listOfSeconds: formatTimePartials(listOfSeconds, locale, 'second'),\n    hour12\n  }\n}\n\n/**\n * Gets the selected hour from a date object in either 12-hour or 24-hour format based on locale and preference.\n * @param {Date | null} date The date object from which to extract the hour. If null, the function returns an empty string.\n * @param {string} locale The locale to use when determining whether to return in 12-hour or 24-hour format.\n * @param {'auto' | boolean} ampm Determines the format of the hour returned. 'auto' decides based on locale, true forces 12-hour format, and false forces 24-hour format.\n * @returns {string | number} The hour in the specified format or an empty string if the date is null.\n */\nexport const getSelectedHour = (date, locale, ampm = 'auto') =>\n  date ?\n    ((ampm === 'auto' && isAmPm(locale)) || ampm === true ?\n      convert24hTo12h(date.getHours()) :\n      date.getHours()) :\n    ''\n\n/**\n * Gets the selected minutes from a date object.\n * @param {Date | null} date The date object from which to extract the minutes. If null, the function returns an empty string.\n * @returns {string | number} The minutes from the date or an empty string if the date is null.\n */\nexport const getSelectedMinutes = date => (date ? date.getMinutes() : '')\n\n/**\n * Gets the selected seconds from a date object.\n * @param {Date | null} date The date object from which to extract the seconds. If null, the function returns an empty string.\n * @returns {string | number} The seconds from the date or an empty string if the date is null.\n */\nexport const getSelectedSeconds = date => (date ? date.getSeconds() : '')\n\n/**\n * Determines if the given locale uses AM/PM format.\n * @param {string} locale The locale to check.\n * @returns {boolean} True if the locale uses AM/PM format, otherwise false.\n */\nexport const isAmPm = locale =>\n  ['am', 'AM', 'pm', 'PM'].some(el =>\n    new Date().toLocaleString(locale).includes(el)\n  )\n\n/**\n * Validates if the given string represents a valid time.\n * @param {string} time The time string to validate.\n * @returns {boolean} True if the string is a valid time, otherwise false.\n */\nexport const isValidTime = time => {\n  const d = new Date(`1970-01-01 ${time}`)\n  return d instanceof Date && !Number.isNaN(d.getTime())\n}\n\n/**\n * Checks whether the given locale formats the hour \"9\" with a leading zero (\"09\")\n * when using `hour: 'numeric'` in `toLocaleTimeString`.\n *\n * This helps determine if you should force `hour: '2-digit'` for consistent formatting.\n *\n * @param {string} locale - The locale code (e.g., \"en-US\", \"pl-PL\").\n * @returns {boolean} `true` if the formatted hour starts with a leading zero, otherwise `false`.\n */\nexport const shouldUseTwoDigitHour = locale => {\n  const d = new Date(2020, 0, 1, 7, 5, 7) // 7:05:07\n  const formatted = d.toLocaleTimeString(locale)\n\n  return formatted.startsWith('0') // check if the hour starts with \"0\"\n}\n"],"names":["convert12hTo24h","abbr","hour","convert24hTo12h","convertTimeToDate","time","Date","getAmPm","date","locale","toLocaleTimeString","includes","getHours","formatTimePartials","values","partial","forceTwoDigit","shouldUseTwoDigitHour","formatter","Intl","DateTimeFormat","minute","second","map","value","_formatter$formatToPa","setHours","setMinutes","setSeconds","label","formatToParts","find","part","type","getLocalizedTimePartials","ampm","hours","minutes","seconds","hour12","isAmPm","listOfHours","Array","isArray","length","from","_","i","filter","listOfMinutes","listOfSeconds","getSelectedHour","getSelectedMinutes","getMinutes","getSelectedSeconds","getSeconds","some","el","toLocaleString","isValidTime","d","Number","isNaN","getTime","formatted","startsWith"],"mappings":"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"}