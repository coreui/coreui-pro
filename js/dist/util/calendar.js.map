{"version":3,"file":"calendar.js","sources":["../../src/util/calendar.js"],"sourcesContent":["/**\n * Converts an ISO week string to a Date object representing the Monday of that week.\n * @param isoWeek - The ISO week string (e.g., \"2023W05\" or \"2023w05\").\n * @returns The Date object for the Monday of the specified week, or null if invalid.\n */\n/**\n * Helper function to calculate Monday of ISO week 1 for a given year.\n * @param year - The year to calculate for.\n * @returns The Monday of ISO week 1.\n */\nconst getMondayOfISOWeek1 = year => {\n  const jan4 = new Date(year, 0, 4)\n  const jan4DayOfWeek = jan4.getDay()\n  const daysFromMonday = jan4DayOfWeek === 0 ? 6 : jan4DayOfWeek - 1 // Sunday = 6 days from Monday\n  const mondayOfWeek1 = new Date(jan4)\n  mondayOfWeek1.setDate(jan4.getDate() - daysFromMonday)\n  return mondayOfWeek1\n}\n\n/**\n * Helper function to calculate Monday of a specific ISO week.\n * @param year - The year.\n * @param week - The ISO week number.\n * @returns The Monday of the specified ISO week.\n */\nconst getMondayOfISOWeek = (year, week) => {\n  const mondayOfWeek1 = getMondayOfISOWeek1(year)\n  const weekStart = new Date(mondayOfWeek1)\n  // prettier-ignore\n  weekStart.setDate(mondayOfWeek1.getDate() + ((week - 1) * 7))\n  return weekStart\n}\n\n/**\n * Helper function to convert a date to a month number for comparison.\n * @param date - The date to convert.\n * @returns A number representing year*12 + month for easy comparison.\n */\nconst dateToMonthNumber = date => {\n  // prettier-ignore\n  return (date.getFullYear() * 12) + date.getMonth()\n}\n\n/**\n * Helper function to check if a value is within min/max range.\n * @param value - The value to check.\n * @param min - Minimum allowed value (null means no minimum).\n * @param max - Maximum allowed value (null means no maximum).\n * @returns True if the value is outside the range, false if within range.\n */\nconst isOutsideRange = (value, min, max) => {\n  if (min !== null && value < min) {\n    return true\n  }\n\n  if (max !== null && value > max) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Converts an ISO week string to a Date object representing the Monday of that week.\n * @param isoWeek - The ISO week string (e.g., \"2023W05\" or \"2023w05\").\n * @returns The Date object for the Monday of the specified week.\n */\nexport const convertIsoWeekToDate = isoWeek => {\n  const [year, week] = isoWeek.split(/[Ww]/)\n  const parsedYear = parseYearSmart(year)\n  const parsedWeek = Number.parseInt(week, 10)\n\n  // Create date from ISO week using helper function\n  return getMondayOfISOWeek(parsedYear, parsedWeek)\n}\n\n/**\n * Parses a week string and returns a Date object for the Monday of that week.\n * @param dateString - The week string to parse.\n * @returns The Date object for the Monday of the week, or null if invalid.\n */\nconst parseWeekString = dateString => {\n  const weekPatterns = [\n    /^(\\d{4})-W(\\d{1,2})$/, // 2023-W05, 2023-W5\n    /^(\\d{4})W(\\d{1,2})$/, // 2023W05, 2023W5\n    /^(\\d{4})\\s+W(\\d{1,2})$/ // 2023 W05, 2023 W5\n  ]\n\n  for (const pattern of weekPatterns) {\n    const match = dateString.trim().match(pattern)\n    if (match) {\n      const parsedYear = parseYearSmart(match[1])\n      const parsedWeek = Number.parseInt(match[2], 10)\n\n      // Create date from ISO week using helper function\n      return getMondayOfISOWeek(parsedYear, parsedWeek)\n    }\n  }\n\n  // Fallback to existing ISO week parsing\n  return convertIsoWeekToDate(dateString)\n}\n\n/**\n * Parses a month string and returns a Date object for the first day of that month.\n * @param dateString - The month string to parse.\n * @returns The Date object for the first day of the month, or null if invalid.\n */\nconst parseMonthString = dateString => {\n  const monthPatterns = [\n    /^(\\d{2,4})[-/.\\s](\\d{1,2})$/, // 2023-12, 23-12, 2023/12, 23/12, 2023 12, etc.\n    /^(\\d{1,2})[-/.\\s](\\d{2,4})$/ // 12-2023, 12-23, 12/2023, 12/23, 12 2023, etc.\n  ]\n\n  for (const pattern of monthPatterns) {\n    const match = dateString.trim().match(pattern)\n    if (match) {\n      const firstGroup = match[1]\n      const secondGroup = match[2]\n\n      // Determine which group is year and which is month\n      const parsedFirst = Number.parseInt(firstGroup, 10)\n      const parsedSecond = Number.parseInt(secondGroup, 10)\n\n      let parsedYear\n      let parsedMonth\n\n      // Determine which group is year and which is month based on several heuristics\n      if (firstGroup.length >= 3 || parsedFirst >= 100) {\n        // First group is clearly a year (3+ digits or >= 100)\n        parsedYear = parseYearSmart(firstGroup)\n        parsedMonth = parsedSecond - 1\n      } else if (secondGroup.length >= 3 || parsedSecond >= 100) {\n        // Second group is clearly a year (3+ digits or >= 100)\n        parsedYear = parseYearSmart(secondGroup)\n        parsedMonth = parsedFirst - 1\n      } else {\n        // Both groups are 1-2 digits, use context clues\n        // If second group is a valid month (1-12), treat first as year\n        // eslint-disable-next-line no-lonely-if\n        if (\n          parsedSecond >= 1 &&\n          parsedSecond <= 12 &&\n          (parsedFirst > 12 || parsedFirst < 1)\n        ) {\n          parsedYear = parseYearSmart(firstGroup)\n          parsedMonth = parsedSecond - 1\n        } else {\n          // Default: treat second group as year\n          parsedYear = parseYearSmart(secondGroup)\n          parsedMonth = parsedFirst - 1\n        }\n      }\n\n      if (parsedMonth >= 0 && parsedMonth <= 11) {\n        return new Date(parsedYear, parsedMonth, 1)\n      }\n    }\n  }\n\n  // For month selection, don't use fallback parsing - return null if no pattern matches\n  return null\n}\n\n/**\n * Parses a year string or number and returns a Date object for January 1st of that year.\n * @param dateString - The year string or number to parse.\n * @returns The Date object for January 1st of the year, or null if invalid.\n */\nconst parseYearString = dateString => {\n  const yearString = String(dateString)\n  const yearPattern = /^(\\d{2,4})$/\n  const match = yearString.trim().match(yearPattern)\n\n  if (match) {\n    const groups = { year: match[1] }\n    return createDateFromYear(groups)\n  }\n\n  return parseLocalDateString(yearString)\n}\n\n/**\n * Helper function to generate multiple date format patterns based on locale.\n * @param locale - The locale to use for date format patterns.\n * @param includeTime - Whether to include time in the patterns.\n * @returns Array of date format patterns.\n */\nconst generateDatePatterns = (locale, includeTime) => {\n  const referenceDate = new Date(2013, 11, 31, 17, 19, 22)\n  const patterns = []\n\n  try {\n    // Get the standard locale format\n    const standardFormat = includeTime ?\n      referenceDate.toLocaleString(locale) :\n      referenceDate.toLocaleDateString(locale)\n\n    patterns.push(standardFormat)\n  } catch {\n    // Fallback to default locale if invalid locale provided\n    const standardFormat = includeTime ?\n      referenceDate.toLocaleString(\"en-US\") :\n      referenceDate.toLocaleDateString(\"en-US\")\n    patterns.push(standardFormat)\n  }\n\n  // Generate common alternative formats by replacing separators\n  const separators = [\"/\", \"-\", \".\", \" \"]\n  const standardFormat = patterns[0]\n\n  // Detect the original separator\n  let originalSeparator = \"/\" // default\n  if (standardFormat.includes(\"/\")) {\n    originalSeparator = \"/\"\n  } else if (standardFormat.includes(\"-\")) {\n    originalSeparator = \"-\"\n  } else if (standardFormat.includes(\".\")) {\n    originalSeparator = \".\"\n  }\n\n  for (const sep of separators) {\n    if (sep !== originalSeparator) {\n      // Escape the original separator for regex if it's a special character\n      const escapedSeparator = originalSeparator.replaceAll(\n        /[.*+?^${}()|[\\]\\\\]/g,\n        String.raw`\\$&`\n      )\n      const altFormat = standardFormat.replaceAll(\n        new RegExp(escapedSeparator, \"g\"),\n        sep\n      )\n      patterns.push(altFormat)\n    }\n  }\n\n  return patterns\n}\n\n/**\n * Helper function to build regex pattern for date parsing.\n * @param formatString - The date format string.\n * @param includeTime - Whether to include time patterns.\n * @returns The regex pattern string.\n */\nconst buildDateRegexPattern = (formatString, includeTime) => {\n  // First escape special regex characters\n\n  let regexPattern = formatString.replaceAll(/[.*+?^${}()|[\\\\]\\\\]/g, \"\\\\$&\")\n\n  // Then replace the date/time components with regex groups\n  regexPattern = regexPattern\n    .replace(\"2013\", String.raw`(?<year>\\d{2,4})`)\n    .replace(\"12\", String.raw`(?<month>\\d{1,2})`)\n    .replace(\"31\", String.raw`(?<day>\\d{1,2})`)\n\n  if (includeTime) {\n    regexPattern = regexPattern\n      .replaceAll(/17|5/g, String.raw`(?<hour>\\d{1,2})`)\n      .replace(\"19\", String.raw`(?<minute>\\d{1,2})`)\n      .replace(\"22\", String.raw`(?<second>\\d{1,2})`)\n      .replaceAll(/AM|PM/gi, \"(?<ampm>[APap][Mm])\")\n  }\n\n  return regexPattern\n}\n\n/**\n * Helper function to try parsing with multiple patterns.\n * @param dateString - The date string to parse.\n * @param patterns - Array of format patterns to try.\n * @param includeTime - Whether time parsing is included.\n * @returns Parsed groups or null if no match.\n */\nconst tryParseWithPatterns = (dateString, patterns, includeTime) => {\n  for (const pattern of patterns) {\n    const regexPattern = buildDateRegexPattern(pattern, includeTime)\n    const regex = new RegExp(`^${regexPattern}$`)\n    const match = dateString.trim().match(regex)\n\n    if (match?.groups) {\n      return match.groups\n    }\n  }\n\n  return null\n}\n\n/**\n * Helper function to convert 12-hour to 24-hour format.\n * @param hour - Hour string.\n * @param ampm - AM/PM indicator.\n * @returns Hour in 24-hour format.\n */\nconst convertTo24Hour = (hour, ampm) => {\n  const parsedHour = Number.parseInt(hour, 10)\n\n  if (!ampm) {\n    return parsedHour\n  }\n\n  const isPM = ampm.toLowerCase() === \"pm\"\n\n  if (isPM && parsedHour !== 12) {\n    return parsedHour + 12\n  }\n\n  if (!isPM && parsedHour === 12) {\n    return 0\n  }\n\n  return parsedHour\n}\n\n/**\n * Helper function to validate time components.\n * @param hour - Hour value.\n * @param minute - Minute value.\n * @param second - Second value.\n * @returns True if time components are valid.\n */\nconst validateTimeComponents = (hour, minute, second) => {\n  return (\n    hour >= 0 &&\n    hour <= 23 &&\n    minute >= 0 &&\n    minute <= 59 &&\n    second >= 0 &&\n    second <= 59\n  )\n}\n\n/**\n * Helper function to validate date components.\n * @param month - Month string.\n * @param day - Day string.\n * @returns True if date components are valid.\n */\nconst validateDateComponents = (month, day) => {\n  const parsedMonth = Number.parseInt(month, 10) - 1\n  const parsedDay = Number.parseInt(day, 10)\n\n  return (\n    parsedMonth >= 0 && parsedMonth <= 11 && parsedDay >= 1 && parsedDay <= 31\n  )\n}\n\n/**\n * Helper function to create date with time.\n * @param groups - Parsed date and time groups.\n * @returns Date object or null if invalid.\n */\nconst createDateWithTime = groups => {\n  const { year, month, day, hour, minute, second, ampm } = groups\n\n  const parsedYear = parseYearSmart(year)\n  const parsedMonth = Number.parseInt(month, 10) - 1\n  const parsedDay = Number.parseInt(day, 10)\n  const parsedHour = convertTo24Hour(hour, ampm)\n  const parsedMinute = Number.parseInt(minute ?? \"0\", 10) || 0\n  const parsedSecond = Number.parseInt(second ?? \"0\", 10) || 0\n\n  if (!validateTimeComponents(parsedHour, parsedMinute, parsedSecond)) {\n    return null\n  }\n\n  return new Date(\n    parsedYear,\n    parsedMonth,\n    parsedDay,\n    parsedHour,\n    parsedMinute,\n    parsedSecond\n  )\n}\n\n/**\n * Helper function to create date without time.\n * @param groups - Parsed date groups.\n * @returns Date object or null if invalid.\n */\nconst createDateOnly = groups => {\n  const { year, month, day } = groups\n\n  if (!validateDateComponents(month, day)) {\n    return null\n  }\n\n  const parsedYear = parseYearSmart(year)\n  const parsedMonth = Number.parseInt(month, 10) - 1\n  const parsedDay = Number.parseInt(day, 10)\n\n  return new Date(parsedYear, parsedMonth, parsedDay)\n}\n\n/**\n * Enhanced day parsing with locale-aware patterns.\n * @param dateString - The day string to parse.\n * @param locale - The locale to use for parsing.\n * @param includeTime - Whether to include time parsing.\n * @returns Date object or null if invalid.\n */\nconst parseDayString = (dateString, locale, includeTime) => {\n  const patterns = generateDatePatterns(locale, includeTime)\n  const groups = tryParseWithPatterns(dateString, patterns, includeTime)\n\n  if (!groups) {\n    // Check if input looks like a complete date (has separators and multiple parts)\n    // If so, use fallback parsing for formats like \"2022/08/17\", \"2022-08-17\"\n    // If not (like \"1\", \"12\"), return null\n    const trimmed = dateString.trim()\n    const hasDateSeparators = /[-/.:]/.test(trimmed)\n    const parts = trimmed.split(/[-/.\\s:]+/).filter(part => part.length > 0)\n    const hasMultipleParts = parts.length >= 2\n\n    if (hasDateSeparators && hasMultipleParts) {\n      // Use fallback for complete date strings that don't match locale patterns\n      return parseLocalDateString(dateString)\n    }\n\n    // For incomplete input like \"1\" or \"12\", return null\n    return null\n  }\n\n  // For day selection, require at least month and day to be present\n  if (\"month\" in groups && \"day\" in groups) {\n    const { month, day } = groups\n    if (!validateDateComponents(month, day)) {\n      return null\n    }\n  } else {\n    // If incomplete date information, return null instead of guessing\n    return null\n  }\n\n  // Create and return appropriate date object\n  return includeTime ? createDateWithTime(groups) : createDateOnly(groups)\n}\n\n/**\n * Parses a date string into a local Date object.\n * @param dateString - The date string to parse.\n * @returns The Date object in local timezone, or null if invalid.\n */\nconst parseLocalDateString = dateString => {\n  const _date = new Date(Date.parse(dateString))\n  if (!Number.isNaN(_date.getTime())) {\n    return _date\n  }\n\n  return null\n}\n\n/**\n * Converts a date string or Date object to a Date object based on selection type.\n * @param date - The date to convert.\n * @param selectionType - The type of selection ('day', 'week', 'month', 'year').\n * @param locale - The locale to use for date parsing (for day parsing).\n * @param includeTime - Whether to include time parsing (for day parsing).\n * @returns The corresponding Date object or null if invalid.\n */\nexport const convertToDateObject = (\n  date,\n  selectionType,\n  locale = \"en-US\",\n  includeTime = false\n) => {\n  if (date === null) {\n    return null\n  }\n\n  if (date instanceof Date) {\n    return Number.isNaN(date.getTime()) ? null : date\n  }\n\n  const dateString = date\n\n  switch (selectionType) {\n    case \"week\": {\n      return parseWeekString(dateString)\n    }\n\n    case \"month\": {\n      return parseMonthString(dateString)\n    }\n\n    case \"year\": {\n      return parseYearString(dateString)\n    }\n\n    default: {\n      // Enhanced day parsing with locale support\n      return parseDayString(dateString, locale, includeTime)\n    }\n  }\n}\n\n/**\n * Enhanced locale-aware date parsing function (replaces getLocalDateFromString).\n * @param dateString - The date string to parse.\n * @param locale - The locale to use for date format patterns.\n * @param includeTime - Whether to include time parsing.\n * @param selectionType - The selection type ('day', 'week', 'month', 'year').\n * @returns A Date object if parsing succeeds, null if parsing fails.\n */\nexport const getLocalDateFromString = (\n  dateString,\n  locale = \"en-US\",\n  includeTime = false,\n  selectionType = \"day\"\n) => {\n  // Input validation\n  if (!dateString || typeof dateString !== \"string\") {\n    return null\n  }\n\n  return convertToDateObject(dateString, selectionType, locale, includeTime)\n}\n\n/**\n * Creates groups from an array.\n * @param arr - The array to group.\n * @param numberOfGroups - Number of groups to create.\n * @returns An array of grouped arrays.\n */\nexport const createGroupsInArray = (arr, numberOfGroups) => {\n  const perGroup = Math.ceil(arr.length / numberOfGroups)\n  return Array.from({ length: numberOfGroups })\n    .fill(\"\")\n    .map((_, i) => arr.slice(i * perGroup, (i + 1) * perGroup))\n}\n\n/**\n * Adjusts the calendar date based on order and view type.\n * @param calendarDate - The current calendar date.\n * @param order - The order to adjust by.\n * @param view - The current view type.\n * @returns The adjusted Date object.\n */\nexport const getCalendarDate = (calendarDate, order, view) => {\n  if (order !== 0 && view === \"days\") {\n    return new Date(\n      calendarDate.getFullYear(),\n      calendarDate.getMonth() + order,\n      1\n    )\n  }\n\n  if (order !== 0 && view === \"months\") {\n    return new Date(\n      calendarDate.getFullYear() + order,\n      calendarDate.getMonth(),\n      1\n    )\n  }\n\n  if (order !== 0 && view === \"years\") {\n    // prettier-ignore\n    return new Date(calendarDate.getFullYear() + (12 * order), calendarDate.getMonth(), 1)\n  }\n\n  return calendarDate\n}\n\n/**\n * Formats a date based on the selection type.\n * @param date - The date to format.\n * @param selectionType - The type of selection ('day', 'week', 'month', 'year').\n * @returns A formatted date string or the original Date object.\n */\nexport const getDateBySelectionType = (date, selectionType) => {\n  if (date === null) {\n    return null\n  }\n\n  if (selectionType === \"week\") {\n    const { year, weekNumber } = getISOWeekNumberAndYear(date)\n    return `${year}W${weekNumber.toString().padStart(2, \"0\")}`\n  }\n\n  if (selectionType === \"month\") {\n    const monthNumber = `0${date.getMonth() + 1}`.slice(-2)\n    return `${date.getFullYear()}-${monthNumber}`\n  }\n\n  if (selectionType === \"year\") {\n    return `${date.getFullYear()}`\n  }\n\n  return date\n}\n\n/**\n * Retrieves the first available date within a range that is not disabled.\n * @param startDate - Start date of the range.\n * @param endDate - End date of the range.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns The first available Date object or null if none found.\n */\nexport const getFirstAvailableDateInRange = (\n  startDate,\n  endDate,\n  min,\n  max,\n  disabledDates\n) => {\n  const _min = min ?\n    new Date(Math.max(startDate.getTime(), min.getTime())) :\n    startDate\n  const _max = max ?\n    new Date(Math.min(endDate.getTime(), max.getTime())) :\n    endDate\n\n  if (disabledDates === undefined) {\n    return _min\n  }\n\n  for (\n    const currentDate = new Date(_min);\n    // eslint-disable-next-line no-unmodified-loop-condition\n    currentDate <= _max;\n    currentDate.setDate(currentDate.getDate() + 1)\n  ) {\n    if (!isDateDisabled(currentDate, min, max, disabledDates)) {\n      return currentDate\n    }\n  }\n\n  return null\n}\n\n/**\n * Retrieves an array of month names based on locale and format.\n * @param locale - The locale string (e.g., 'en-US').\n * @param format - The format of the month names ('short' or 'long').\n * @returns An array of month names.\n */\nexport const getMonthsNames = (locale, format = \"short\") => {\n  return Array.from({ length: 12 }, (_, i) => {\n    return new Date(2000, i, 1).toLocaleString(locale, { month: format })\n  })\n}\n\n/**\n * Retrieves an array of selectable dates from the given element.\n * @param element - The HTML element to search for selectable dates.\n * @param selector - The CSS selector used to identify selectable dates. Defaults to 'tr[tabindex=\"0\"], td[tabindex=\"0\"]'.\n * @returns An array of HTMLElements representing the selectable dates.\n */\nexport const getSelectableDates = (\n  element,\n  selector = 'tr[tabindex=\"0\"], td[tabindex=\"0\"]'\n) => {\n  return [...Element.prototype.querySelectorAll.call(element, selector)]\n}\n\n/**\n * Generates an array of years centered around a given year.\n * @param year - The central year.\n * @param range - The number of years before and after the central year.\n * @returns An array of years.\n */\nexport const getYears = (year, range = 6) => {\n  return Array.from({ length: range * 2 }, (_, i) => year - range + i)\n}\n\n/**\n * Retrieves leading days (from the previous month) for a calendar view.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param firstDayOfWeek - The first day of the week (0-6, where 0 is Sunday).\n * @returns An array of leading day objects.\n */\nconst getLeadingDays = (year, month, firstDayOfWeek) => {\n  // 0: sunday\n  // 1: monday\n  const dates = []\n  const d = new Date(year, month)\n  const y = d.getFullYear()\n  const m = d.getMonth()\n  const firstWeekday = new Date(y, m, 1).getDay()\n  let leadingDays = 6 - (6 - firstWeekday) - firstDayOfWeek\n\n  if (firstDayOfWeek) {\n    leadingDays = leadingDays < 0 ? 7 + leadingDays : leadingDays\n  }\n\n  for (let i = leadingDays * -1; i < 0; i++) {\n    dates.push({\n      date: new Date(y, m, i + 1),\n      month: \"previous\"\n    })\n  }\n\n  return dates\n}\n\n/**\n * Retrieves all days within a specific month.\n * @param year - The year.\n * @param month - The month (0-11).\n * @returns An array of day objects.\n */\nconst getMonthDays = (year, month) => {\n  const dates = []\n  const lastDay = new Date(year, month + 1, 0).getDate()\n  for (let i = 1; i <= lastDay; i++) {\n    dates.push({\n      date: new Date(year, month, i),\n      month: \"current\"\n    })\n  }\n\n  return dates\n}\n\n/**\n * Retrieves trailing days (from the next month) for a calendar view.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param leadingDays - Array of leading day objects.\n * @param monthDays - Array of current month day objects.\n * @returns An array of trailing day objects.\n */\nconst getTrailingDays = (year, month, leadingDays, monthDays) => {\n  const dates = []\n  const days = 42 - (leadingDays.length + monthDays.length)\n  for (let i = 1; i <= days; i++) {\n    dates.push({\n      date: new Date(year, month + 1, i),\n      month: \"next\"\n    })\n  }\n\n  return dates\n}\n\n/**\n * Calculates the ISO 8601 week number and year for a given date.\n *\n * In the ISO 8601 standard:\n * - Weeks start on Monday.\n * - The first week of the year is the one that contains January 4th.\n * - The year of the week may differ from the calendar year (e.g., Dec 29, 2025 is in ISO year 2026).\n *\n * @param {Date} date - The date for which to calculate the ISO week number and year.\n * @returns {{ weekNumber: number, year: number }} An object containing:\n *   - `weekNumber`: the ISO week number (1–53),\n *   - `year`: the ISO year (may differ from the calendar year of the date).\n */\nexport const getISOWeekNumberAndYear = date => {\n  const tempDate = new Date(date)\n  tempDate.setHours(0, 0, 0, 0)\n\n  // Thursday in current week decides the year\n  tempDate.setDate(tempDate.getDate() + 3 - ((tempDate.getDay() + 6) % 7))\n\n  const week1 = new Date(tempDate.getFullYear(), 0, 4)\n\n  // Calculate full weeks to the date\n  const weekNumber =\n    1 + Math.round((tempDate.getTime() - week1.getTime()) / (86_400_000 * 7))\n\n  return { weekNumber, year: tempDate.getFullYear() }\n}\n\n/**\n * Retrieves detailed information about each week in a month for calendar rendering.\n * @param year - The year.\n * @param month - The month (0-11).\n * @param firstDayOfWeek - The first day of the week (0-6, where 0 is Sunday).\n * @returns An array of week objects containing week numbers and day details.\n */\nexport const getMonthDetails = (year, month, firstDayOfWeek) => {\n  const daysPrevMonth = getLeadingDays(year, month, firstDayOfWeek)\n  const daysThisMonth = getMonthDays(year, month)\n  const daysNextMonth = getTrailingDays(\n    year,\n    month,\n    daysPrevMonth,\n    daysThisMonth\n  )\n  const days = [...daysPrevMonth, ...daysThisMonth, ...daysNextMonth]\n  const weeks = []\n\n  for (const [index, day] of days.entries()) {\n    if (index % 7 === 0 || weeks.length === 0) {\n      weeks.push({\n        week: { number: 0, year: 0 },\n        days: []\n      })\n    }\n\n    if ((index + 1) % 7 === 0) {\n      const { weekNumber, year } = getISOWeekNumberAndYear(day.date)\n      const lastWeek = weeks.at(-1)\n      if (lastWeek) {\n        lastWeek.week = { number: weekNumber, year }\n      }\n    }\n\n    const lastWeek = weeks.at(-1)\n    if (lastWeek) {\n      lastWeek.days.push(day)\n    }\n  }\n\n  return weeks\n}\n\n/**\n * Checks if a date is disabled based on the 'date' period type.\n * @param date - The date to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the date is disabled, false otherwise.\n */\nexport const isDateDisabled = (date, min, max, disabledDates) => {\n  if (min && date < min) {\n    return true\n  }\n\n  if (max && date > max) {\n    return true\n  }\n\n  if (disabledDates === undefined) {\n    return false\n  }\n\n  if (typeof disabledDates === \"function\") {\n    return disabledDates(date)\n  }\n\n  if (disabledDates instanceof Date && isSameDateAs(date, disabledDates)) {\n    return true\n  }\n\n  if (Array.isArray(disabledDates) && disabledDates) {\n    for (const _date of disabledDates) {\n      if (typeof _date === \"function\" && _date(date)) {\n        return true\n      }\n\n      if (Array.isArray(_date) && isDateInRange(date, _date[0], _date[1])) {\n        return true\n      }\n\n      if (_date instanceof Date && isSameDateAs(date, _date)) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\n/**\n * Checks if a date is within a specified range.\n * @param date - The date to check.\n * @param start - Start date of the range.\n * @param end - End date of the range.\n * @returns True if the date is within the range, false otherwise.\n */\nexport const isDateInRange = (date, start, end) => {\n  const _date = removeTimeFromDate(date)\n  const _start = start ? removeTimeFromDate(start) : null\n  const _end = end ? removeTimeFromDate(end) : null\n\n  return Boolean(_start && _end && _start <= _date && _date <= _end)\n}\n\n/**\n * Checks if a date is selected based on start and end dates.\n * @param date - The date to check.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the date is selected, false otherwise.\n */\nexport const isDateSelected = (date, start, end) => {\n  if (start !== null && isSameDateAs(start, date)) {\n    return true\n  }\n\n  if (end !== null && isSameDateAs(end, date)) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Determines if any date within a range is disabled.\n * @param startDate - Start date of the range.\n * @param endDate - End date of the range.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if any date in the range is disabled, false otherwise.\n */\nexport const isDisableDateInRange = (startDate, endDate, disabledDates) => {\n  if (startDate && endDate) {\n    const date = new Date(startDate)\n    let disabled = false\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (date < endDate) {\n      date.setDate(date.getDate() + 1)\n      if (isDateDisabled(date, null, null, disabledDates)) {\n        disabled = true\n        break\n      }\n    }\n\n    return disabled\n  }\n\n  return false\n}\n\n/**\n * Checks if a month is disabled based on the 'month' period type.\n * @param date - The date representing the month to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the month is disabled, false otherwise.\n */\nexport const isMonthDisabled = (date, min, max, disabledDates) => {\n  const current = dateToMonthNumber(date)\n  const _min = min ? dateToMonthNumber(min) : null\n  const _max = max ? dateToMonthNumber(max) : null\n\n  if (isOutsideRange(current, _min, _max)) {\n    return true\n  }\n\n  if (disabledDates === undefined) {\n    return false\n  }\n\n  const startTime = min ?\n    Math.max(date.getTime(), min.getTime()) :\n    date.getTime()\n  const endTime = max ?\n    Math.min(date.getTime(), max.getTime()) :\n    new Date(new Date().getFullYear(), 11, 31).getTime()\n\n  for (\n    const currentDate = new Date(startTime);\n    currentDate.getTime() <= endTime;\n    currentDate.setDate(currentDate.getDate() + 1)\n  ) {\n    if (!isDateDisabled(currentDate, min, max, disabledDates)) {\n      return false\n    }\n  }\n\n  return false\n}\n\n/**\n * Checks if a month is selected based on start and end dates.\n * @param date - The date representing the month.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the month is selected, false otherwise.\n */\nexport const isMonthSelected = (date, start, end) => {\n  const year = date.getFullYear()\n  const month = date.getMonth()\n\n  if (\n    start !== null &&\n    year === start.getFullYear() &&\n    month === start.getMonth()\n  ) {\n    return true\n  }\n\n  if (end !== null && year === end.getFullYear() && month === end.getMonth()) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Checks if a month is within a specified range.\n * @param date - The date representing the month.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the month is within the range, false otherwise.\n */\nexport const isMonthInRange = (date, start, end) => {\n  const _start = start ? dateToMonthNumber(start) : null\n  const _end = end ? dateToMonthNumber(end) : null\n  const _date = dateToMonthNumber(date)\n\n  return Boolean(_start && _end && _start <= _date && _date <= _end)\n}\n\n/**\n * Checks if two dates are the same calendar date.\n * @param date - First date.\n * @param date2 - Second date.\n * @returns True if both dates are the same, false otherwise.\n */\nexport const isSameDateAs = (date, date2) => {\n  if (date instanceof Date && date2 instanceof Date) {\n    return (\n      date.getDate() === date2.getDate() &&\n      date.getMonth() === date2.getMonth() &&\n      date.getFullYear() === date2.getFullYear()\n    )\n  }\n\n  if (date === null && date2 === null) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Checks if a date is today.\n * @param date - The date to check.\n * @returns True if the date is today, false otherwise.\n */\nexport const isToday = date => {\n  const today = new Date()\n  return isSameDateAs(date, today)\n}\n\n/**\n * Checks if a year is disabled based on the 'year' period type.\n * @param date - The date representing the year to check.\n * @param min - Minimum allowed date.\n * @param max - Maximum allowed date.\n * @param disabledDates - Criteria for disabled dates.\n * @returns True if the year is disabled, false otherwise.\n */\nexport const isYearDisabled = (date, min, max, disabledDates) => {\n  const year = date.getFullYear()\n  const minYear = min ? min.getFullYear() : null\n  const maxYear = max ? max.getFullYear() : null\n\n  if (isOutsideRange(year, minYear, maxYear)) {\n    return true\n  }\n\n  if (disabledDates === undefined) {\n    return false\n  }\n\n  const startTime = min ?\n    Math.max(date.getTime(), min.getTime()) :\n    date.getTime()\n  const endTime = max ?\n    Math.min(date.getTime(), max.getTime()) :\n    new Date(new Date().getFullYear(), 11, 31).getTime()\n\n  for (\n    const currentDate = new Date(startTime);\n    currentDate.getTime() <= endTime;\n    currentDate.setDate(currentDate.getDate() + 1)\n  ) {\n    if (!isDateDisabled(currentDate, min, max, disabledDates)) {\n      return false\n    }\n  }\n\n  return false\n}\n\n/**\n * Checks if a year is selected based on start and end dates.\n * @param date - The date representing the year.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the year matches the start's or end's year, false otherwise.\n */\nexport const isYearSelected = (date, start, end) => {\n  const year = date.getFullYear()\n\n  if (start !== null && year === start.getFullYear()) {\n    return true\n  }\n\n  if (end !== null && year === end.getFullYear()) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Checks if a year is within a specified range.\n * @param date - The date representing the year.\n * @param start - Start date.\n * @param end - End date.\n * @returns True if the year's value lies between start's year and end's year, false otherwise.\n */\nexport const isYearInRange = (date, start, end) => {\n  const year = date.getFullYear()\n  const _start = start ? start.getFullYear() : null\n  const _end = end ? end.getFullYear() : null\n\n  return Boolean(_start && _end && _start <= year && year <= _end)\n}\n\n/**\n * Removes the time component from a Date object.\n * @param date - The original date.\n * @returns A new Date object with the time set to 00:00:00.\n */\nexport const removeTimeFromDate = date => {\n  const clearedDate = new Date(date)\n  clearedDate.setHours(0, 0, 0, 0)\n  return clearedDate\n}\n\n/**\n * Copies the time (hours, minutes, seconds, milliseconds) from one Date to another.\n *\n * @param {Date} target - The date whose time will be updated.\n * @param {Date | null} source - The date to copy the time from.\n * @returns {Date} A new Date instance with the date from `target` and time from `source`.\n */\nexport const setTimeFromDate = (target, source) => {\n  if (target === null) {\n    return null\n  }\n\n  if (!(source instanceof Date)) {\n    return target\n  }\n\n  const result = new Date(target) // create a copy to avoid mutation\n  result.setHours(\n    source.getHours(),\n    source.getMinutes(),\n    source.getSeconds(),\n    source.getMilliseconds()\n  )\n\n  return result\n}\n\n/**\n * Parses a year string with smart 2-digit handling.\n * @param yearString - The year string to parse.\n * @returns The parsed year as a number with intelligent century assignment.\n */\nexport const parseYearSmart = yearString => {\n  let parsedYear = Number.parseInt(yearString, 10)\n\n  // Handle 2-digit years with intelligent century assignment\n  if (parsedYear < 100) {\n    const currentYear = new Date().getFullYear()\n    const currentCentury = Math.floor(currentYear / 100) * 100\n    parsedYear = currentCentury + parsedYear\n\n    // If the result is more than 50 years in the future, use previous century\n    // This creates a sliding window: for current year 2025, years 76-99 become 1976-1999\n    // and years 00-75 become 2000-2075\n    if (parsedYear > currentYear + 50) {\n      parsedYear -= 100\n    }\n  }\n\n  return parsedYear\n}\n\n/**\n * Creates a date from year groups.\n * @param groups - The year groups containing year string.\n * @returns A Date object for January 1st of the year.\n */\nexport const createDateFromYear = groups => {\n  const { year } = groups\n  const parsedYear = parseYearSmart(year)\n  return new Date(parsedYear, 0, 1)\n}\n\n/**\n * Creates a date from month groups.\n * @param groups - The month groups containing year and month strings.\n * @returns A Date object for the first day of the month.\n */\nexport const createDateFromMonth = groups => {\n  const { year, month } = groups\n  const parsedYear = parseYearSmart(year)\n  const parsedMonth = Number.parseInt(month, 10) - 1\n  return new Date(parsedYear, parsedMonth, 1)\n}\n\n/**\n * Creates a date from week groups.\n * @param groups - The week groups containing year and week strings.\n * @returns A Date object for the Monday of the specified week.\n */\nexport const createDateFromWeek = groups => {\n  const { year, week } = groups\n  const parsedYear = parseYearSmart(year)\n  const parsedWeek = Number.parseInt(week, 10)\n\n  // Create date from ISO week using helper function\n  return getMondayOfISOWeek(parsedYear, parsedWeek)\n}\n"],"names":["getMondayOfISOWeek1","year","jan4","Date","jan4DayOfWeek","getDay","daysFromMonday","mondayOfWeek1","setDate","getDate","getMondayOfISOWeek","week","weekStart","dateToMonthNumber","date","getFullYear","getMonth","isOutsideRange","value","min","max","convertIsoWeekToDate","isoWeek","split","parsedYear","parseYearSmart","parsedWeek","Number","parseInt","parseWeekString","dateString","weekPatterns","pattern","match","trim","parseMonthString","monthPatterns","firstGroup","secondGroup","parsedFirst","parsedSecond","parsedMonth","length","parseYearString","yearString","String","yearPattern","groups","createDateFromYear","parseLocalDateString","generateDatePatterns","locale","includeTime","referenceDate","patterns","standardFormat","toLocaleString","toLocaleDateString","push","_unused","separators","originalSeparator","includes","sep","escapedSeparator","replaceAll","raw","_t","_2","altFormat","RegExp","buildDateRegexPattern","formatString","regexPattern","replace","_t2","_t3","_t4","_t5","_t6","_t7","tryParseWithPatterns","regex","convertTo24Hour","hour","ampm","parsedHour","isPM","toLowerCase","validateTimeComponents","minute","second","validateDateComponents","month","day","parsedDay","createDateWithTime","parsedMinute","createDateOnly","parseDayString","trimmed","hasDateSeparators","test","parts","filter","part","hasMultipleParts","_date","parse","isNaN","getTime","convertToDateObject","selectionType","getLocalDateFromString","createGroupsInArray","arr","numberOfGroups","perGroup","Math","ceil","Array","from","fill","map","_","i","slice","getCalendarDate","calendarDate","order","view","getDateBySelectionType","weekNumber","getISOWeekNumberAndYear","toString","padStart","monthNumber","getFirstAvailableDateInRange","startDate","endDate","disabledDates","_min","_max","undefined","currentDate","isDateDisabled","getMonthsNames","format","getSelectableDates","element","selector","Element","prototype","querySelectorAll","call","getYears","range","getLeadingDays","firstDayOfWeek","dates","d","y","m","firstWeekday","leadingDays","getMonthDays","lastDay","getTrailingDays","monthDays","days","tempDate","setHours","week1","round","getMonthDetails","daysPrevMonth","daysThisMonth","daysNextMonth","weeks","index","entries","number","lastWeek","at","isSameDateAs","isArray","isDateInRange","start","end","removeTimeFromDate","_start","_end","Boolean","isDateSelected","isDisableDateInRange","disabled","isMonthDisabled","current","startTime","endTime","isMonthSelected","isMonthInRange","date2","isToday","today","isYearDisabled","minYear","maxYear","isYearSelected","isYearInRange","clearedDate","setTimeFromDate","target","source","result","getHours","getMinutes","getSeconds","getMilliseconds","currentYear","currentCentury","floor","createDateFromMonth","createDateFromWeek"],"mappings":"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"}