{"version":3,"file":"date-range-picker.js","sources":["../../src/util/date-range-picker.js"],"sourcesContent":["// Helper function to generate multiple date format patterns\nconst generateDatePatterns = (locale, includeTime) => {\n  const referenceDate = new Date(2013, 11, 31, 17, 19, 22)\n  const patterns = []\n\n  try {\n    // Get the standard locale format\n    const standardFormat = includeTime ?\n      referenceDate.toLocaleString(locale) :\n      referenceDate.toLocaleDateString(locale)\n\n    patterns.push(standardFormat)\n  } catch {\n    // Fallback to default locale if invalid locale provided\n    const standardFormat = includeTime ?\n      referenceDate.toLocaleString('en-US') :\n      referenceDate.toLocaleDateString('en-US')\n    patterns.push(standardFormat)\n  }\n\n  // Generate common alternative formats by replacing separators\n  const separators = ['/', '-', '.', ' ']\n  const standardFormat = patterns[0]\n\n  // Detect the original separator\n  let originalSeparator = '/' // default\n  if (standardFormat.includes('/')) {\n    originalSeparator = '/'\n  } else if (standardFormat.includes('-')) {\n    originalSeparator = '-'\n  } else if (standardFormat.includes('.')) {\n    originalSeparator = '.'\n  }\n\n  for (const sep of separators) {\n    if (sep !== originalSeparator) {\n      const altFormat = standardFormat.replace(new RegExp(`\\\\${originalSeparator}`, 'g'), sep)\n      patterns.push(altFormat)\n    }\n  }\n\n  return patterns\n}\n\n// Helper function to build regex pattern for date parsing\nconst buildDateRegexPattern = (formatString, includeTime) => {\n  let regexPattern = formatString\n    .replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n    .replace('2013', '(?<year>\\\\d{2,4})')\n    .replace('12', '(?<month>\\\\d{1,2})')\n    .replace('31', '(?<day>\\\\d{1,2})')\n\n  if (includeTime) {\n    regexPattern = regexPattern\n      .replace(/17|5/g, '(?<hour>\\\\d{1,2})')\n      .replace('19', '(?<minute>\\\\d{1,2})')\n      .replace('22', '(?<second>\\\\d{1,2})')\n      .replace(/AM|PM/gi, '(?<ampm>[APap][Mm])')\n  }\n\n  return regexPattern\n}\n\n// Helper function to try parsing with multiple patterns\nconst tryParseWithPatterns = (dateString, patterns, includeTime) => {\n  for (const pattern of patterns) {\n    const regexPattern = buildDateRegexPattern(pattern, includeTime)\n    const regex = new RegExp(`^${regexPattern}$`)\n    const match = dateString.trim().match(regex)\n\n    if (match?.groups) {\n      return match.groups\n    }\n  }\n\n  return null\n}\n\n// Helper function to validate date components\nconst validateDateComponents = (month, day) => {\n  const parsedMonth = Number.parseInt(month, 10) - 1\n  const parsedDay = Number.parseInt(day, 10)\n\n  return parsedMonth >= 0 && parsedMonth <= 11 && parsedDay >= 1 && parsedDay <= 31\n}\n\n// Helper function to convert 12-hour to 24-hour format\nconst convertTo24Hour = (hour, ampm) => {\n  const parsedHour = Number.parseInt(hour, 10)\n\n  if (!ampm) {\n    return parsedHour\n  }\n\n  const isPM = ampm.toLowerCase() === 'pm'\n\n  if (isPM && parsedHour !== 12) {\n    return parsedHour + 12\n  }\n\n  if (!isPM && parsedHour === 12) {\n    return 0\n  }\n\n  return parsedHour\n}\n\n// Helper function to validate time components\nconst validateTimeComponents = (hour, minute, second) => {\n  return hour >= 0 && hour <= 23 &&\n         minute >= 0 && minute <= 59 &&\n         second >= 0 && second <= 59\n}\n\n// Helper function to create date with time\nconst createDateWithTime = groups => {\n  const { year, month, day, hour, minute, second, ampm } = groups\n\n  const parsedYear = Number.parseInt(year, 10)\n  const parsedMonth = Number.parseInt(month, 10) - 1\n  const parsedDay = Number.parseInt(day, 10)\n  const parsedHour = convertTo24Hour(hour, ampm)\n  const parsedMinute = Number.parseInt(minute, 10) || 0\n  const parsedSecond = Number.parseInt(second, 10) || 0\n\n  if (!validateTimeComponents(parsedHour, parsedMinute, parsedSecond)) {\n    return 'invalid'\n  }\n\n  return new Date(parsedYear, parsedMonth, parsedDay, parsedHour, parsedMinute, parsedSecond)\n}\n\n// Helper function to create date without time\nconst createDateOnly = groups => {\n  const { year, month, day } = groups\n\n  const parsedYear = Number.parseInt(year, 10)\n  const parsedMonth = Number.parseInt(month, 10) - 1\n  const parsedDay = Number.parseInt(day, 10)\n\n  return new Date(parsedYear, parsedMonth, parsedDay)\n}\n\n/**\n * Parses a date string using locale-aware patterns and returns a Date object.\n *\n * This function generates multiple date format patterns based on the provided locale\n * and attempts to parse the input string using these patterns. It supports various\n * date separators (/, -, ., space) and handles both date-only and date-time formats.\n *\n * @param {string} dateString - The date string to parse (e.g., \"12/31/2023\", \"31-12-2023\")\n * @param {string} [locale='en-US'] - The locale to use for date format patterns (e.g., 'en-US', 'en-GB', 'de-DE')\n * @param {boolean} [includeTime=false] - Whether to include time parsing in the pattern matching\n * @returns {Date|string|undefined} A Date object if parsing succeeds, 'invalid' for malformed dates, undefined for empty input\n */\nexport const getLocalDateFromString = (dateString, locale = 'en-US', includeTime = false) => {\n  // Input validation\n  if (!dateString || typeof dateString !== 'string') {\n    return\n  }\n\n  // Generate multiple format patterns to try\n  const patterns = generateDatePatterns(locale, includeTime)\n\n  // Try parsing with different patterns\n  const groups = tryParseWithPatterns(dateString, patterns, includeTime)\n\n  if (!groups) {\n    return 'invalid'\n  }\n\n  // Validate date components\n  const { month, day } = groups\n  if (!validateDateComponents(month, day)) {\n    return 'invalid'\n  }\n\n  // Create and return appropriate date object\n  return includeTime ? createDateWithTime(groups) : createDateOnly(groups)\n}\n"],"names":["generateDatePatterns","locale","includeTime","referenceDate","Date","patterns","standardFormat","toLocaleString","toLocaleDateString","push","_unused","separators","originalSeparator","includes","sep","altFormat","replace","RegExp","buildDateRegexPattern","formatString","regexPattern","tryParseWithPatterns","dateString","pattern","regex","match","trim","groups","validateDateComponents","month","day","parsedMonth","Number","parseInt","parsedDay","convertTo24Hour","hour","ampm","parsedHour","isPM","toLowerCase","validateTimeComponents","minute","second","createDateWithTime","year","parsedYear","parsedMinute","parsedSecond","createDateOnly","getLocalDateFromString"],"mappings":"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"}