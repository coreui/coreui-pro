{"version":3,"sources":["../scss/_grid.scss","../scss/mixins/_grid.scss","../scss/mixins/_breakpoints.scss","../scss/variables/_grid.scss","../scss/mixins/_grid-framework.scss"],"names":[],"mappings":"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","sourcesContent":["// Container widths\n//\n// Set the container width, and override it for fixed navbars in media queries.\n\n@if $enable-grid-classes {\n  .#{$bs-prefix}container {\n    @include make-container();\n    @include make-container-max-widths();\n  }\n}\n\n// Fluid container\n//\n// Utilizes the mixin meant for fixed width containers, but with 100% width for\n// fluid, full width layouts.\n\n@if $enable-grid-classes {\n  .#{$bs-prefix}container-fluid {\n    @include make-container();\n  }\n}\n\n// Row\n//\n// Rows contain and clear the floats of your columns.\n\n@if $enable-grid-classes {\n  .#{$bs-prefix}row {\n    @include make-row();\n  }\n\n  // Remove the negative margin from default .#{$bs-prefix}row, then the horizontal padding\n  // from all immediate children columns (to prevent runaway style inheritance).\n  .#{$bs-prefix}no-gutters {\n    margin-right: 0;\n    margin-left: 0;\n\n    > .#{$bs-prefix}col,\n    > [class*=\"col-\"] {\n      padding-right: 0;\n      padding-left: 0;\n    }\n  }\n}\n\n// Columns\n//\n// Common styles for small and large grid columns\n\n@if $enable-grid-classes {\n  @include make-grid-columns();\n}\n\n// CoreUI start\n.#{$bs-prefix}row.#{$bs-prefix}row-equal {\n  padding-right: ($grid-gutter-width / 4);\n  padding-left: ($grid-gutter-width / 4);\n  margin-right: ($grid-gutter-width / -2);\n  margin-left: ($grid-gutter-width / -2);\n\n  [class*=\"col-\"] {\n    padding-right: ($grid-gutter-width / 4);\n    padding-left: ($grid-gutter-width / 4);\n  }\n}\n\n.#{$bs-prefix}main .#{$bs-prefix}container-fluid {\n  padding: 0 30px;\n}\n// CoreUI end\n","/// Grid system\n//\n// Generate semantic grid columns with these mixins.\n\n@mixin make-container($gutter: $grid-gutter-width) {\n  width: 100%;\n  padding-right: $gutter / 2;\n  padding-left: $gutter / 2;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n\n// For each breakpoint, define the maximum width of the container in a media query\n@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint, $container-max-width in $max-widths {\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      max-width: $container-max-width;\n    }\n  }\n}\n\n@mixin make-row($gutter: $grid-gutter-width) {\n  display: flex;\n  flex-wrap: wrap;\n  margin-right: -$gutter / 2;\n  margin-left: -$gutter / 2;\n}\n\n@mixin make-col-ready($gutter: $grid-gutter-width) {\n  position: relative;\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we use `flex` values\n  // later on to override this initial width.\n  width: 100%;\n  padding-right: $gutter / 2;\n  padding-left: $gutter / 2;\n}\n\n@mixin make-col($size, $columns: $grid-columns) {\n  flex: 0 0 percentage($size / $columns);\n  // Add a `max-width` to ensure content within each column does not blow out\n  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n  // do not appear to require this.\n  max-width: percentage($size / $columns);\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: $size / $columns;\n  margin-left: if($num == 0, 0, percentage($num));\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","\n\n// Grid breakpoints\n//\n// Define the minimum dimensions at which your layout will change,\n// adapting to different screen sizes, for use in media queries.\n\n$grid-breakpoints: (\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px\n) !default;\n\n@include _assert-ascending($grid-breakpoints, \"$grid-breakpoints\");\n@include _assert-starts-at-zero($grid-breakpoints, \"$grid-breakpoints\");\n\n\n// Grid containers\n//\n// Define the maximum width of `.container` for different screen sizes.\n\n$container-max-widths: (\n  sm: 540px,\n  md: 720px,\n  lg: 960px,\n  xl: 1140px\n) !default;\n\n@include _assert-ascending($container-max-widths, \"$container-max-widths\");\n\n\n// Grid columns\n//\n// Set the number of columns and specify the width of the gutters.\n\n$grid-columns:                12 !default;\n$grid-gutter-width:           30px !default;\n","// Framework grid generation\n//\n// Used only by Bootstrap to generate the correct number of grid classes given\n// any value of `$grid-columns`.\n\n@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {\n  // Common properties for all breakpoints\n  %grid-column {\n    position: relative;\n    width: 100%;\n    padding-right: $gutter / 2;\n    padding-left: $gutter / 2;\n  }\n\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    // Allow columns to stretch full width below their breakpoints\n    @for $i from 1 through $columns {\n      .#{$bs-prefix}col#{$infix}-#{$i} {\n        @extend %grid-column;\n      }\n    }\n    .#{$bs-prefix}col#{$infix},\n    .#{$bs-prefix}col#{$infix}-auto {\n      @extend %grid-column;\n    }\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      // Provide basic `.col-{bp}` classes for equal-width flexbox columns\n      .#{$bs-prefix}col#{$infix} {\n        flex-basis: 0;\n        flex-grow: 1;\n        max-width: 100%;\n      }\n      .#{$bs-prefix}col#{$infix}-auto {\n        flex: 0 0 auto;\n        width: auto;\n        max-width: 100%; // Reset earlier grid tiers\n      }\n\n      @for $i from 1 through $columns {\n        .#{$bs-prefix}col#{$infix}-#{$i} {\n          @include make-col($i, $columns);\n        }\n      }\n\n      .#{$bs-prefix}order#{$infix}-first { order: -1; }\n\n      .#{$bs-prefix}order#{$infix}-last { order: $columns + 1; }\n\n      @for $i from 0 through $columns {\n        .#{$bs-prefix}order#{$infix}-#{$i} { order: $i; }\n      }\n\n      // `$columns - 1` because offsetting by the width of an entire row isn't possible\n      @for $i from 0 through ($columns - 1) {\n        @if not ($infix == \"\" and $i == 0) { // Avoid emitting useless .offset-0\n          .#{$bs-prefix}offset#{$infix}-#{$i} {\n            @include make-col-offset($i, $columns);\n          }\n        }\n      }\n    }\n  }\n}\n"]}