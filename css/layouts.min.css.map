{"version":3,"sources":["../scss/layouts/_default.scss","../scss/variables/components/_header.scss","../scss/mixins/_breakpoints.scss","../scss/variables/_grid.scss"],"names":[],"mappings":"AAIA,OACE,QAAS,KACT,eAAgB,OAChB,WAAY,MAIyB,wCACrC,KACE,QAAS,KACT,eAAgB,QAIpB,WACE,QAAS,KACT,eAAgB,OAChB,WAAY,MAEZ,2BACE,OAAQ,QAMR,qBACA,WC7BoC,KDgCnB,oCACjB,WCjCoC,KDqClC,6CACA,WAAY,MAEK,4DACjB,WAAY,MAKlB,QACE,QAAS,KACT,eAAgB,IAChB,UAAW,EAGb,QACE,KAAM,EACN,UAAW,EACX,YAAa,KEGa,yBFDxB,yBAEE,cGvBc,KHwBd,aGxBc,MH8BhB,wBACA,YCnEoC,KDsEV,gDAC1B,YAAa","sourcesContent":["//\n// CoreUI default layout\n//\n\n.#{$prefix}app {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n// IE10&11 Flexbox fix\n@media all and (-ms-high-contrast: none) {\n  html {\n    display: flex;\n    flex-direction: column;\n  }\n}\n\n.#{$prefix}wrapper {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n\n  .#{$prefix}header-fixed{\n    margin: inherit;\n  }\n}\n\n// if header on top\n.#{$prefix}header {\n  ~ .#{$prefix}sidebar {\n    margin-top: $header-height;\n  }\n\n  &.#{$prefix}header-fixed ~ .#{$prefix}wrapper {\n    margin-top: $header-height;\n  }\n\n  &.#{$prefix}header-with-subheader {\n    ~ .#{$prefix}sidebar {\n      margin-top: $header-height + $header-subheader-height;\n    }\n    &.#{$prefix}header-fixed ~ .#{$prefix}wrapper {\n      margin-top: $header-height + $header-subheader-height;\n    }\n  }\n}\n\n.#{$prefix}body {\n  display: flex;\n  flex-direction: row;\n  flex-grow: 1;\n}\n\n.#{$prefix}main {\n  flex: 1;\n  min-width: 0;\n  padding-top: 2 * $spacer;\n\n  > .#{$bs-prefix}container-fluid {\n    @include media-breakpoint-up(md) {\n      padding-right: $grid-gutter-width;\n      padding-left: $grid-gutter-width;\n    }\n  }\n}\n\n.#{$prefix}header-fixed {\n  ~ .#{$prefix}body {\n    padding-top: $header-height;\n  }\n\n  &.#{$prefix}header-with-subheader ~ .#{$prefix}body {\n    padding-top: $header-height + $header-subheader-height;\n  }\n}\n","// Header\n\n$header-height:                         56px !default;\n$header-brand-width:                    256px !default;\n$header-brand-minimized-width:          56px !default;\n$header-subheader-height:               48px !default;\n\n$header-padding-y:                      $spacer / 2 !default;\n$header-padding-x:                      $spacer !default;\n\n$header-nav-link-padding-x:             .5rem !default;\n\n$header-brand-font-size:                $font-size-lg !default;\n$header-brand-height:                   $header-brand-font-size * $line-height-base !default;\n$header-brand-padding-y:                ($nav-link-height - $header-brand-height) / 2 !default;\n\n\n// Default theme\n\n$header-toggler-bg:                   transparent !default;\n$header-toggler-padding-y:            .25rem !default;\n$header-toggler-padding-x:            .75rem !default;\n$header-toggler-font-size:            $font-size-lg !default;\n$header-toggler-border:               0 !default;\n$header-toggler-border-radius:        $btn-border-radius !default;\n\n$header-dark-bg:                      $gray-800 !default;\n$header-dark-color:                   rgba($white, .75) !default;\n$header-dark-border: (\n  bottom: 1px solid $gray-800\n) !default;\n$header-dark-hover-color:             rgba($white, .9) !default;\n$header-dark-active-color:            $white !default;\n$header-dark-disabled-color:          rgba($white, .25) !default;\n$header-dark-toggler-icon-bg:         str-replace(url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='#{$header-dark-color}' stroke-width='2.25' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\"), \"#\", \"%23\") !default;\n$header-dark-toggler-hover-icon-bg:   str-replace(url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='#{$header-dark-hover-color}' stroke-width='2.25' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\"), \"#\", \"%23\") !default;\n$header-dark-toggler-border-color:    rgba($white, .1) !default;\n\n$header-light-bg:                     $white !default;\n$header-light-color:                  rgba($black, .5) !default;\n$header-light-border: (\n  bottom: 1px solid $border-color\n) !default;\n$header-light-hover-color:            rgba($black, .7) !default;\n$header-light-active-color:           rgba($black, .9) !default;\n$header-light-disabled-color:         rgba($black, .3) !default;\n$header-light-toggler-icon-bg:        str-replace(url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='#{$header-light-color}' stroke-width='2.25' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\"), \"#\", \"%23\") !default;\n$header-light-toggler-hover-icon-bg:  str-replace(url(\"data:image/svg+xml;charset=utf8,%3Csvg viewBox='0 0 30 30' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath stroke='#{$header-light-hover-color}' stroke-width='2.25' stroke-linecap='round' stroke-miterlimit='10' d='M4 7h22M4 15h22M4 23h22'/%3E%3C/svg%3E\"), \"#\", \"%23\") !default;\n$header-light-toggler-border-color:   rgba($black, .1) !default;\n\n$header-light-brand-bg:               transparent !default;\n$header-light-brand-border:           0 !default;\n$header-light-brand-color:            $header-light-active-color !default;\n$header-light-brand-hover-color:      $header-light-active-color !default;\n$header-light-brand-minimized-bg:     transparent !default;\n$header-light-brand-minimized-border: 0 !default;\n\n$header-dark-brand-bg:                transparent !default;\n$header-dark-brand-border:            0 !default;\n$header-dark-brand-color:             $header-dark-active-color !default;\n$header-dark-brand-hover-color:       $header-dark-active-color !default;\n$header-dark-brand-minimized-bg:      transparent !default;\n$header-dark-brand-minimized-border:  0 !default;\n\n$subheader-light-border: (\n  top: 1px solid $border-color\n) !default;\n\n$subheader-dark-border: (\n  top: 1px solid $gray-800\n) !default;\n\n\n$header-variants-map: () !default;\n// stylelint-disable-next-line scss/dollar-variable-default\n$header-variants-map: map-merge(\n  (\n    dark: (\n      \"header-bg\":                     $header-dark-bg,\n      \"header-color\":                  $header-dark-color,\n      \"header-border\":                 $header-dark-border,\n      \"dark-theme-header-border\":      0,\n      \"header-hover-color\":            $header-dark-hover-color,\n      \"header-active-color\":           $header-dark-active-color,\n      \"header-disabled-color\":         $header-dark-disabled-color,\n      \"header-toggler-icon-bg\":        $header-dark-toggler-icon-bg,\n      \"header-toggler-hover-icon-bg\":  $header-dark-toggler-hover-icon-bg,\n      \"header-toggler-border-color\":   $header-dark-toggler-border-color,\n      \"header-brand-bg\":               $header-dark-brand-bg,\n      \"header-brand-border\":           $header-dark-brand-border,\n      \"header-brand-color\":            $header-dark-brand-color,\n      \"header-brand-hover-color\":      $header-dark-brand-hover-color,\n      \"header-brand-minimized-bg\":     $header-dark-brand-minimized-bg,\n      \"header-brand-minimized-border\": $header-dark-brand-minimized-border,\n      \"subheader-border\":              $subheader-dark-border\n    ),\n    light: (\n      \"header-bg\":                     $header-light-bg,\n      \"header-color\":                  $header-light-color,\n      \"header-border\":                 $header-light-border,\n      \"dark-theme-header-border\":      0,\n      \"header-hover-color\":            $header-light-hover-color,\n      \"header-active-color\":           $header-light-active-color,\n      \"header-disabled-color\":         $header-light-disabled-color,\n      \"header-toggler-icon-bg\":        $header-light-toggler-icon-bg,\n      \"header-toggler-hover-icon-bg\":  $header-light-toggler-hover-icon-bg,\n      \"header-toggler-border-color\":   $header-light-toggler-border-color,\n      \"header-brand-bg\":               $header-light-brand-bg,\n      \"header-brand-border\":           $header-light-brand-border,\n      \"header-brand-color\":            $header-light-brand-color,\n      \"header-brand-hover-color\":      $header-light-brand-hover-color,\n      \"header-brand-minimized-bg\":     $header-light-brand-minimized-bg,\n      \"header-brand-minimized-border\": $header-light-brand-minimized-border,\n      \"subheader-border\":              $subheader-light-border\n    )\n  ),\n  $header-variants-map\n);\n\n$header-default-variant: \"light\" !default;\n$header-variants: (\n  default: $header-default-variant,\n  map: $header-variants-map\n) !default;\n\n$header-theme-map: () !default;\n// stylelint-disable-next-line scss/dollar-variable-default\n$header-theme-map: map-merge(\n  (\n    light: $header-variants\n  ),\n  $header-theme-map\n);\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","\n\n// Grid breakpoints\n//\n// Define the minimum dimensions at which your layout will change,\n// adapting to different screen sizes, for use in media queries.\n\n$grid-breakpoints: (\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px\n) !default;\n\n@include _assert-ascending($grid-breakpoints, \"$grid-breakpoints\");\n@include _assert-starts-at-zero($grid-breakpoints, \"$grid-breakpoints\");\n\n\n// Grid containers\n//\n// Define the maximum width of `.container` for different screen sizes.\n\n$container-max-widths: (\n  sm: 540px,\n  md: 720px,\n  lg: 960px,\n  xl: 1140px\n) !default;\n\n@include _assert-ascending($container-max-widths, \"$container-max-widths\");\n\n\n// Grid columns\n//\n// Set the number of columns and specify the width of the gutters.\n\n$grid-columns:      12 !default;\n$grid-gutter-width: 30px !default;\n"]}