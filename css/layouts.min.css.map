{"version":3,"sources":["../scss/themes/legacy/_root.scss","../scss/themes/dark/_root.scss","../scss/layouts/_default.scss","../scss/mixins/_breakpoints.scss","../scss/variables/_grid.scss"],"names":[],"mappings":"AAAA,MAEI,uBAAuC,QAAvC,yBAAuC,QAAvC,uBAAuC,QAAvC,oBAAuC,KAAvC,uBAAuC,QAAvC,sBAAuC,QAAvC,qBAAuC,QAAvC,oBAAuC,QCF3C,MAEI,qBAAmC,QAAnC,uBAAmC,QAAnC,qBAAmC,QAAnC,kBAAmC,QAAnC,qBAAmC,QAAnC,oBAAmC,QAAnC,mBAAmC,QAAnC,kBAAmC,QCEvC,OACE,QAAS,KACT,eAAgB,IAChB,WAAY,MAIyB,wCACrC,KACE,QAAS,KACT,eAAgB,QAIpB,WACE,QAAS,KACT,KAAM,EACN,eAAgB,OAChB,UAAW,EACX,WAAY,MAIV,oDACE,SAAU,SAGZ,iDACE,SAAU,OACV,IAAK,EAEkC,wCAJzC,iDAKI,SAAU,MACV,OAAQ,QAEN,yDACA,WAAY,OAKlB,iDACE,SAAU,OACV,OAAQ,EAE+B,wCAJzC,iDAKI,SAAU,MACV,OAAQ,QAEN,yDACA,cAAe,MAKrB,yCAGE,QAAS,KACT,eAAgB,OAGhB,UAAW,EAhDP,2BAsDN,WAAY,MAEZ,2CACE,OAAQ,QAKd,QACE,WAAY,KACZ,YAAa,EACb,UAAW,EACX,UAAW,EACX,YAAa,KCZa,yBDcxB,yBAEE,cEnDe,KFoDf,aEpDe","sourcesContent":[":root {\n  @each $color, $value in $theme-colors {\n    --#{$color}-legacy-theme: #{$value};\n  }\n}\n",":root {\n  @each $color, $value in $theme-colors__dt {\n    --#{$color}-dark-theme: #{$value};\n  }\n}\n","//\n// CoreUI default layout\n//\n\n.c-app {\n  display: flex;\n  flex-direction: row;\n  min-height: 100vh;\n}\n\n// IE10&11 Flexbox fix\n@media all and (-ms-high-contrast: none) {\n  html {\n    display: flex;\n    flex-direction: column;\n  }\n}\n\n.c-wrapper {\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  min-width: 0;\n  min-height: 100vh;\n\n  &:not(.c-wrapper-fluid) {\n\n    .c-subheader-fixed {\n      position: relative;\n    }\n\n    .c-header-fixed {\n      position: sticky;\n      top: 0;\n\n      @media all and (-ms-high-contrast: none) {\n        position: fixed;\n        margin: inherit;\n\n        ~ .c-body {\n          margin-top: 104px;\n        }\n      }\n    }\n\n    .c-footer-fixed {\n      position: sticky;\n      bottom: 0;\n\n      @media all and (-ms-high-contrast: none) {\n        position: fixed;\n        margin: inherit;\n\n        ~ .c-body {\n          margin-bottom: 49px;\n        }\n      }\n    }\n\n    .c-body {\n      // deprecate v4\n      // fix footer position to avoid breaking change.\n      display: flex;\n      flex-direction: column;\n      // ---\n\n      flex-grow: 1;\n    }\n  }\n\n  // deprecate v4\n  &.c-wrapper-fluid {\n    min-height: 100vh;\n\n    .c-header-fixed {\n      margin: inherit;\n    }\n  }\n}\n\n.c-main {\n  flex-basis: auto;\n  flex-shrink: 0;\n  flex-grow: 1;\n  min-width: 0;\n  padding-top: 2 * $spacer;\n\n  > .container-fluid {\n    @include media-breakpoint-up(md) {\n      padding-right: $grid-gutter-width;\n      padding-left: $grid-gutter-width;\n    }\n  }\n}\n\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Name of the previous breakpoint, or null for the first breakpoint.\n//\n//    >> breakpoint-before(lg)\n//    md\n//    >> breakpoint-next(lg, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(lg, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-before($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n - 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","\n\n// Grid breakpoints\n//\n// Define the minimum dimensions at which your layout will change,\n// adapting to different screen sizes, for use in media queries.\n\n$grid-breakpoints: (\n  xs:  0,\n  sm:  576px,\n  md:  768px,\n  lg:  992px,\n  xl:  1200px\n) !default;\n\n@include _assert-ascending($grid-breakpoints, \"$grid-breakpoints\");\n@include _assert-starts-at-zero($grid-breakpoints, \"$grid-breakpoints\");\n\n\n// Grid containers\n//\n// Define the maximum width of `.container` for different screen sizes.\n\n$container-max-widths: (\n  sm:  540px,\n  md:  720px,\n  lg:  960px,\n  xl:  1140px\n) !default;\n\n@include _assert-ascending($container-max-widths, \"$container-max-widths\");\n\n\n// Grid columns\n//\n// Set the number of columns and specify the width of the gutters.\n\n$grid-columns:       12 !default;\n$grid-gutter-width:  30px !default;\n$grid-row-columns:   6 !default;\n"]}